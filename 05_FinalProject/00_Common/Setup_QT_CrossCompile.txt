1. Install the QT creator normally. It can be execute on Window only.
2. Download the GNU toolchain for cross compile as below options:
    a. Option 1: Download the GNU toolchain for raspberrypi: https://gnutoolchains.com/raspberry64/
    b. Option 2: Download from ARM Developer page: https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads
        e.g. https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu/14.3.rel1/binrel/arm-gnu-toolchain-14.3.rel1-mingw-w64-x86_64-aarch64-none-linux-gnu.exe
    c. Set the Environment Variable to <toolchain path>/bin which including the list of exe file (e.g. aarch64-linux-gnu-gcc.exe)
    d. test the toolchain successfully install by execute the version check in cmd: aarch64-linux-gnu-gcc --version
    Note: Recommend to install the toolchain with the path not include the space.

3. Download source of QT for cross compile (qt-everywhere):
    example: https://mirrors.sau.edu.cn/qt/archive/qt/6.9/6.9.1/single/qt-everywhere-src-6.9.1.zip
    Then extract it to C:/qt-build (just recommend)

4. using the rsyn to copy the system root from raspberrypi device (via ssh):
     rsync -avzL --delete --safe-links tuan@raspberrypi.local:/lib /c/rpi-sysroot/
     rsync -avzL --delete --safe-links tuan@raspberrypi.local:/usr /c/rpi-sysroot/
     rsync -avzL --delete --safe-links tuan@raspberrypi.local:/etc /c/rpi-sysroot/
     rsync -avzL --delete --safe-links tuan@raspberrypi.local:/opt /c/rpi-sysroot/


5. Install MSYS2 and config the cross compile:
    a. Download from: https://www.msys2.org
    b. Install neccessary package to MSY2: open MSYS2 MinGW64 Shell and run:
        pacman -Syu
        pacman -S git cmake ninja perl python unzip zip
    c. Open MSYS2 MinGW64 shell, and set environment variables:
        export PATH=/c/SysGCC/raspberry64/bin:$PATH
        export SYSROOT=/c/rpi-sysroot
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CMAKE_TOOLCHAIN_FILE=$PWD/toolchain.cmake
    d. Now, create toolchain.cmake:
        # toolchain.cmake
        SET(CMAKE_SYSTEM_NAME Linux)
        SET(CMAKE_SYSTEM_PROCESSOR arm)

        SET(CMAKE_C_COMPILER   aarch64-linux-gnu-gcc)
        SET(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
        SET(CMAKE_SYSROOT     "C:/rpi-sysroot")
        SET(SYSROOT           "C:/rpi-sysroot")

        SET(CMAKE_FIND_ROOT_PATH  ${SYSROOT})

        SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
        SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
        SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
    e. Then from the root of your Qt source (e.g. cd to /c/qt-build/qt-everywhere-src-6.9.1):
        mkdir build; cd build
        ../configure -release -opengl es2 -nomake examples -nomake tests -qt-host-path C:/Qt/6.9.1/mingw_64 -extprefix C:/msys64/home/tuan/qt-raspi -prefix /usr/local/qt6 -device linux-rasp-pi4-aarch64 -device-option CROSS_COMPILE=aarch64-linux-gnu- -- -DCMAKE_TOOLCHAIN_FILE=C:/msys64/home/tuan/toolchain.cmake -DQT_FEATURE_xcb=ON -DFEATURE_xcb_xlib=ON -DQT_FEATURE_xlib=ON -DGLESv2_LIBRARY=C:/rpi-sysroot/usr/lib/aarch64-linux-gnu/libGLESv2.so-DGLESv2_INCLUDE_DIR=C:/rpi-sysroot/usr/include -DQT_NO_PACKAGE_VERSION_CHECK=TRUE
        Or: cmake .. -GNinja -DCMAKE_TOOLCHAIN_FILE=$PWD/toolchain.cmake -DCMAKE_INSTALL_PREFIX=/usr/local/qt6pi -DQT_HOST_PATH="C:/Qt/6.9.1/mingw_64" -DQT_BUILD_EXAMPLES=OFF -DQT_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release -DQT_FEATURE_webengine=OFF -DQT_SKIP_MODULES="qtwebengine;qtopcua;qtgrpc;protobuf"
        cmake ../ -GNinja -DCMAKE_BUILD_TYPE=Release -DINPUT_opengl=es2 -DQT_BUILD_EXAMPLES=OFF -DQT_BUILD_TESTS=OFF -DQT_HOST_PATH=C:/Qt/6.9.1/mingw_64 -DCMAKE_STAGING_PREFIX=C:/msys64/home/tuan/qt-raspi -DCMAKE_INSTALL_PREFIX=/usr/local/qt6 -DCMAKE_TOOLCHAIN_FILE=C:/msys64/home/tuan/toolchain.cmake -DQT_QMAKE_TARGET_MKSPEC=devices/linux-rasp-pi4-aarch64 -DQT_FEATURE_xcb=ON -DFEATURE_xcb_xlib=ON -DQT_FEATURE_xlib=ON
        Note: -DQT_SKIP_MODULES="qtwebengine;qtopcua;qtgrpc;protobuf" is the flag to ignore these module, should consider if target application need them.
    f. Then:
        ninja
        ninja install

6. Setup the QT project:
    a. In Qt Creator, add a new kit: Tools → Options → Kits → Add Kit
    b. Set compiler to aarch64-linux-gnu-g++
    c. Set debugger if available (optional)
    d. Set Qt version using the qmake path inside your new build: C:\<Path To build>\qtbase\bin\qmake.exe
    e. Set sysroot to: C:\rpi-sysroot

7. Deploy Qt to Pi Zero:
    rsync -avz ~/qt6pi tuan@raspberrypi:/usr/local/
